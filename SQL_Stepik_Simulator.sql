+---------+-----------------------+------------------+--------+--------+
| book_id | title                 | author           | price  | amount |
+---------+-----------------------+------------------+--------+--------+
| 1       | Мастер и Маргарита    | Булгаков М.А.    | 670.99 | 3      |
| 2       | Белая гвардия         | Булгаков М.А.    | 540.50 | 5      |
| 3       | Идиот                 | Достоевский Ф.М. | 460.00 | 10     |
| 4       | Братья Карамазовы     | Достоевский Ф.М. | 799.01 | 2      |
| 5       | Стихотворения и поэмы | Есенин С.А.      | 650.00 | 15     |
+---------+-----------------------+------------------+--------+--------+

Сформулируйте SQL запрос для создания таблицы book
	CREATE TABLE book(
	   book_id INT PRIMARY KEY AUTO_INCREMENT,
	   title VARCHAR(50),
	   author VARCHAR(30),
	   price DECIMAL(8, 2),
	   amount INT
	);
_______________________________________________
Занесите новую строку в таблицу book
	INSERT INTO book(title, author, price, amount)
	VALUES ('Мастер и Маргарита', 'Булгаков М.А.', 670.99, 3);
	SELECT * FROM book;
_______________________________________________
Занесите три записи в таблицу book, первая запись уже добавлена
	INSERT INTO book(title, author, price, amount)
	VALUE ('Белая гвардия', 'Булгаков М.А.', 540.50, 5),
		('Идиот', 'Достоевский Ф.М.', 460.00, 10),
		('Братья Карамазовы', 'Достоевский Ф.М.', 799.01, 2)
	SELECT * FROM book;
_______________________________________________
Вывести информацию о всех книгах, хранящихся на складе.
	SELECT *
	FROM book;
_______________________________________________
Выбрать авторов, название книг и их цену из таблицы book.
	SELECT author, title, price
	FROM book;
_______________________________________________
Выбрать названия книг и авторов из таблицы book, для поля title задать имя(псевдоним) Название, для поля author –  Автор.
	SELECT title AS Название, author AS Автор
	FROM book;
_______________________________________________
Для упаковки каждой книги требуется 1 лист бумаги, цена которого 1 рубль 65 копеек. Сколько денег потребуется, чтобы упаковать все экземпляры книги?. В запросе вывести название книги, ее количество и стоимость упаковки, последний столбец назвать pack.
	SELECT title, amount, amount * 1.65 AS pack
	FROM book;
_______________________________________________
В конце года цену всех книг на складе пересчитывают – снижают ее на 30%. Написать SQL запрос, который из таблицы book выбирает названия, авторов, количества и вычисляет новые цены книг. Столбец с новой ценой назвать new_price, цену округлить до 2-х знаков после запятой.
	SELECT title, author, amount, ROUND(price*(1-30/100), 2) AS new_price
	FROM book;
_______________________________________________
При анализе продаж книг выяснилось, что наибольшей популярностью пользуются книги Михаила Булгакова, на втором месте книги Сергея Есенина. Исходя из этого решили поднять цену книг Булгакова на 10%, а цену книг Есенина - на 5%. Написать запрос, куда включить автора, название книги и новую цену, последний столбец назвать new_price. Значение округлить до двух знаков после запятой.
	SELECT author, title, 
		ROUND(IF(author='Булгаков М.А.', price*(1+10/100), IF(author='Есенин С.А.', price*(1+5/100), price)),2) AS           new_price
	FROM book;
_______________________________________________
Вывести автора, название  и цены тех книг, количество которых меньше 10.
	SELECT author, title, price
	FROM book
	WHERE amount < 10;
_______________________________________________
Вывести название, автора,  цену  и количество всех книг, цена которых меньше 500 или больше 600, а стоимость всех экземпляров этих книг больше или равна 5000.
	SELECT title, author, price, amount
	FROM book
	WHERE (price < 500 OR price > 600) AND price * amount >= 5000;
_______________________________________________
Вывести название и авторов тех книг, цены которых принадлежат интервалу от 540.50 до 800 (включая границы),  а количество или 2, или 3, или 5, или 7 .
	SELECT title, author
	FROM book
	WHERE (price BETWEEN 540.50 AND 800) AND (amount IN (2, 3, 5, 7));
_______________________________________________
Вывести  автора и название  книг, количество которых принадлежит интервалу от 2 до 14 (включая границы). Информацию  отсортировать сначала по авторам (в обратном алфавитном порядке), а затем по названиям книг (по алфавиту).
	SELECT author, title
	FROM book
	WHERE amount BETWEEN 2 AND 14
	ORDER BY author DESC, title;
_______________________________________________
Вывести название и автора тех книг, название которых состоит из двух и более слов, а инициалы автора содержат букву «С». Считать, что в названии слова отделяются друг от друга пробелами и не содержат знаков препинания, между фамилией автора и инициалами обязателен пробел, инициалы записываются без пробела в формате: буква, точка, буква, точка. Информацию отсортировать по названию книги в алфавитном порядке.
	SELECT title, author
	FROM book
	WHERE title LIKE "_% _%"
		AND author LIKE "%_ %С.%"
	ORDER BY title;
_______________________________________________
Отобрать различные (уникальные) элементы столбца amount таблицы book.
	SELECT DISTINCT amount
	FROM book;
_______________________________________________
Посчитать, количество различных книг и количество экземпляров книг каждого автора , хранящихся на складе.  Столбцы назвать Автор, Различных_книг и Количество_экземпляров соответственно.
	SELECT author AS Автор, COUNT(*) AS Различных_книг, SUM(amount) AS Количество_экземпляров
	FROM book
	GROUP BY author;
_______________________________________________
Вывести фамилию автора, минимальную, максимальную и среднюю цену книг каждого автора . Вычисляемые столбцы назвать Минимальная_цена, Максимальная_цена и Средняя_цена соответственно.
	SELECT author, 
		MIN(price) AS 'Минимальная_цена', 
		MAX(price) AS 'Максимальная_цена', 
		AVG(price) AS 'Средняя_цена'
	FROM book
	GROUP BY author;
_______________________________________________
Для каждого автора вычислить суммарную стоимость книг S (имя столбца Стоимость), а также вычислить налог на добавленную стоимость  для полученных сумм (имя столбца НДС ) , который включен в стоимость и составляет k = 18%,  а также стоимость книг  (Стоимость_без_НДС) без него. Значения округлить до двух знаков после запятой.
	SELECT author, SUM(price * amount) AS Стоимость, 
		SUM(ROUND((price * amount * 18 / 100) / (1 + 18 / 100), 2)) AS НДС,
		SUM(price * amount - ROUND((price * amount * 18 / 100) / (1 + 18 / 100), 2)) AS Стоимость_без_НДС
	FROM book
	GROUP BY author;
_______________________________________________
Вывести  цену самой дешевой книги, цену самой дорогой и среднюю цену книг на складе. Названия столбцов Минимальная_цена, Максимальная_цена, Средняя_цена соответственно. Среднюю цену округлить до двух знаков после запятой.
	SELECT MIN(price) AS Минимальная_цена,
		MAX(price) AS Максимальная_цена,
		ROUND(AVG(price), 2) AS Средняя_цена
	FROM book;
_______________________________________________
Вычислить среднюю цену и суммарную стоимость тех книг, количество экземпляров которых принадлежит интервалу от 5 до 14, включительно. Столбцы назвать Средняя_цена и Стоимость, значения округлить до 2-х знаков после запятой.
	SELECT ROUND(AVG(price), 2) AS Средняя_цена, 
		ROUND(SUM(price * amount), 2) AS Стоимость
	FROM book
	WHERE amount BETWEEN 5 AND 14;
_______________________________________________
Посчитать стоимость всех экземпляров каждого автора без учета книг «Идиот» и «Белая гвардия». В результат включить только тех авторов, у которых суммарная стоимость книг более 5000 руб. Вычисляемый столбец назвать Стоимость. Результат отсортировать по убыванию стоимости.
	SELECT author, SUM(price * amount) AS Стоимость
	FROM book
	WHERE title NOT IN ('Идиот','Белая гвардия')
	GROUP BY author
	HAVING SUM(price * amount) > 5000
	ORDER BY Стоимость DESC;
_______________________________________________
Вывести информацию (автора, название и цену) о  книгах, цены которых меньше или равны средней цене книг на складе. Информацию вывести в отсортированном по убыванию цены виде. Среднее вычислить как среднее по цене книги.
	SELECT author, title, price
	FROM book
	WHERE price <= (
		SELECT AVG(price)
		FROM book
		)
	ORDER BY price DESC;
_______________________________________________
Вывести информацию (автора, название и цену) о тех книгах, цены которых превышают минимальную цену книги на складе не более чем на 150 рублей в отсортированном по возрастанию цены виде.
	SELECT author, title, price
	FROM book
	WHERE price - (
		SELECT MIN(price)
		FROM book
		) <= 150
	ORDER BY price;
_______________________________________________
Вывести информацию (автора, книгу и количество) о тех книгах, количество экземпляров которых в таблице book не дублируется.
	SELECT author, title, amount
	FROM book
	WHERE amount IN (
		SELECT amount
		FROM book
		GROUP BY amount
		HAVING COUNT(title) = 1
		);
_______________________________________________
Вывести информацию о книгах(автор, название, цена), цена которых меньше самой большой из минимальных цен, вычисленных для каждого автора.
	SELECT author, title, price
	FROM book
	WHERE price < ANY (
		SELECT MIN(price)
		FROM book
		GROUP BY author
		);
_______________________________________________
Посчитать сколько и каких экземпляров книг нужно заказать поставщикам, чтобы на складе стало одинаковое количество экземпляров каждой книги, равное значению самого большего количества экземпляров одной книги на складе. Вывести название книги, ее автора, текущее количество экземпляров на складе и количество заказываемых экземпляров книг. Последнему столбцу присвоить имя Заказ.
	SELECT title, author, amount, 
		(SELECT MAX(amount) FROM book) - amount AS Заказ
	FROM book
	WHERE amount <> (SELECT MAX(amount) FROM book);
_______________________________________________
Вывести информацию по самой дорогой книге из тех, у которых минимальный запас на складе. Дополнительным столбцом вывести долю количества этой книги в общем остатке всех книг на складе.
	SELECT author, title, price, amount, ROUND(amount / 
		(
		SELECT SUM(amount)
		FROM book
		),
	2) AS Доля_книг                                      
	FROM book
	WHERE amount = 
		(
		SELECT MIN(amount)
		FROM book
		)
		AND
		price = 
		(
		SELECT MAX(price)
		FROM book
		WHERE amount = 
			(
			SELECT MIN(amount)
			FROM book
			) 
		)
_______________________________________________
Создать таблицу поставка (supply), которая имеет ту же структуру, что и таблица book.
	CREATE TABLE supply(
	   supply_id INT PRIMARY KEY AUTO_INCREMENT,
	   title VARCHAR(50),
	   author VARCHAR(30),
	   price DECIMAL(8, 2),
	   amount INT
	)
_______________________________________________
Занесите в таблицу supply четыре записи, чтобы получилась следующая таблица:

supply_id	title	author	price	amount
1	Лирика	Пастернак Б.Л.	518.99	2
2	Черный человек 	Есенин С.А.	570.20	6
3	Белая гвардия	Булгаков М.А.	540.50	7
4	Идиот	Достоевский Ф.М.	360.80	3
	INSERT INTO supply (title, author, price, amount)
	VALUES 
		('Лирика', 'Пастернак Б.Л.', 518.99, 2),
		('Черный человек', 'Есенин С.А.', 570.20, 6),
		('Белая гвардия', 'Булгаков М.А.', 540.50, 7),
		('Идиот', 'Достоевский Ф.М.', 360.80, 3);
_______________________________________________
Добавить из таблицы supply в таблицу book, все книги, кроме книг, написанных Булгаковым М.А. и Достоевским Ф.М.
	INSERT INTO book (title, author, price, amount)
	SELECT title, author, price, amount
	FROM supply
	WHERE author NOT LIKE 'Булгаков%'
		AND author NOT LIKE 'Достоев%'
_______________________________________________
Занести из таблицы supply в таблицу book только те книги, авторов которых нет в  book.
	INSERT INTO book (title, author, price, amount)
	SELECT title, author, price, amount
	FROM supply
	WHERE author NOT IN
		(SELECT author
		 FROM book)
_______________________________________________
Уменьшить на 10% цену тех книг в таблице book, количество которых принадлежит интервалу от 5 до 10, включая границы.
	UPDATE book
	SET price = (1 - 10/100) * price
	WHERE amount BETWEEN 5 AND 10;
_______________________________________________
В таблице book необходимо скорректировать значение для покупателя в столбце buy таким образом, чтобы оно не превышало допустимый остаток в столбце amount. А цену тех книг, которые покупатель не заказывал, снизить на 10%.
	UPDATE book
	SET buy = IF (buy > amount, amount, buy),
		price = IF (buy = 0, (1 - 10/100) * price, price);
_______________________________________________
Для тех книг в таблице book , которые есть в таблице supply, не только увеличить их количество в таблице book ( увеличить их количество на значение столбца amountтаблицы supply), но и пересчитать их цену (для каждой книги найти сумму цен из таблиц book и supply и разделить на 2).
	UPDATE book, supply
	SET book.amount = book.amount + supply.amount,
		book.price = (book.price + supply.price)/2
	WHERE book.title = supply.title;
_______________________________________________
Удалить из таблицы supply книги тех авторов, общее количество экземпляров книг которых в таблице book превышает 10.
	DELETE FROM supply
	WHERE author IN 
		(
		SELECT author 
		FROM book
		GROUP BY author
		HAVING SUM(amount) > 10
		);

	SELECT * FROM supply;
_______________________________________________
Создать таблицу заказ (ordering), куда включить авторов и названия тех книг, количество экземпляров которых в таблице book меньше среднего количества экземпляров книг в таблице book. В таблицу включить столбец   amount, в котором для всех книг указать одинаковое значение - среднее количество экземпляров книг в таблице book.
	CREATE TABLE ordering AS
	SELECT author, title, 
		(
		SELECT ROUND(AVG(amount)) 
		FROM book
		) AS amount
	FROM book
	WHERE amount < 
		(
		SELECT AVG(amount) 
		FROM book
		);

	SELECT * FROM ordering;
_______________________________________________
Вывести id из таблицы book тех книг, количество экземпляров в заказе у которых меньше 3.
	SELECT book_id
	FROM book
	WHERE title IN 
		(SELECT title 
		 FROM supply 
		 WHERE amount > 3);
_______________________________________________
Вывести из таблицы trip информацию о командировках тех сотрудников, фамилия которых заканчивается на букву «а», в отсортированном по убыванию даты последнего дня командировки виде. В результат включить столбцы name, city, per_diem, date_first, date_last.
	SELECT name, city, per_diem, date_first, date_last
	FROM trip
	WHERE name LIKE '%_а %_'
	ORDER BY date_last DESC;
_______________________________________________
Вывести в алфавитном порядке фамилии и инициалы тех сотрудников, которые были в командировке в Москве.
	SELECT DISTINCT name
	FROM trip
	WHERE city = 'Москва'
	ORDER BY name;
_______________________________________________
Для каждого города посчитать, сколько раз сотрудники в нем были.  Информацию вывести в отсортированном в алфавитном порядке по названию городов. Вычисляемый столбец назвать Количество. 
	SELECT city, COUNT(*) AS Количество
	FROM trip
	GROUP BY city
	ORDER BY city;
_______________________________________________
Вывести два города, в которых чаще всего были в командировках сотрудники. Вычисляемый столбец назвать Количество.
	SELECT city, COUNT(*) AS Количество
	FROM trip
	GROUP BY city
	ORDER BY Количество DESC
	LIMIT 2;
_______________________________________________	 
Вывести информацию о командировках во все города кроме Москвы и Санкт-Петербурга (фамилии и инициалы сотрудников, город ,  длительность командировки в днях, при этом первый и последний день относится к периоду командировки). Последний столбец назвать Длительность. Информацию вывести в упорядоченном по убыванию длительности поездки, а потом по убыванию названий городов (в обратном алфавитном порядке).
	SELECT name, city, DATEDIFF(date_last, date_first)+1 AS Длительность
	FROM trip
	WHERE city NOT IN ('Москва','Санкт-Петербург')
	ORDER BY Длительность DESC, city DESC;
_______________________________________________
Вывести информацию о командировках сотрудника(ов), которые были самыми короткими по времени. В результат включить столбцы name, city, date_first, date_last.
	SELECT name, city, date_first, date_last
	FROM trip
	WHERE DATEDIFF(date_last, date_first) = 
		(
		SELECT MIN(DATEDIFF(date_last, date_first))
		FROM trip
		);
_______________________________________________
Вывести информацию о командировках, начало и конец которых относятся к одному месяцу (год может быть любой). В результат включить столбцы name, city, date_first, date_last. Строки отсортировать сначала  в алфавитном порядке по названию города, а затем по фамилии сотрудника .
	SELECT name, city, date_first, date_last
	FROM trip
	WHERE MONTH(date_first) = MONTH(date_last)
	ORDER BY city, name;
_______________________________________________
Вывести название месяца и количество командировок для каждого месяца. Считаем, что командировка относится к некоторому месяцу, если она началась в этом месяце. Информацию вывести сначала в отсортированном по убыванию количества, а потом в алфавитном порядке по названию месяца виде. Название столбцов – Месяц и Количество.
	SELECT MONTHNAME(date_first) AS Месяц,
		COUNT(*) AS Количество
	FROM trip
	GROUP BY MONTHNAME(date_first)
	ORDER BY Количество DESC, Месяц;
_______________________________________________	 
Вывести сумму суточных (произведение количества дней командировки и размера суточных) для командировок, первый день которых пришелся на февраль или март 2020 года. Значение суточных для каждой командировки занесено в столбец per_diem. Вывести фамилию и инициалы сотрудника, город, первый день командировки и сумму суточных. Последний столбец назвать Сумма. Информацию отсортировать сначала  в алфавитном порядке по фамилиям сотрудников, а затем по убыванию суммы суточных.
	SELECT name, city, date_first, 
		(DATEDIFF(date_last, date_first) + 1) * per_diem AS Сумма
	FROM trip
	WHERE MONTH(date_first) IN ('2', '3')
	ORDER BY name, Сумма DESC;
_______________________________________________
Вывести фамилию с инициалами и общую сумму суточных, полученных за все командировки для тех сотрудников, которые были в командировках больше чем 3 раза, в отсортированном по убыванию сумм суточных виде. Последний столбец назвать Сумма.+
	SELECT name, 
		SUM((DATEDIFF(date_last, date_first) + 1) * per_diem) AS Сумма
	FROM trip
	GROUP BY name
	HAVING COUNT(name) > 3
	ORDER BY Сумма DESC;
_______________________________________________
Создать таблицу fine следующей структуры:

Поле	Описание
fine_id	ключевой столбец целого типа с автоматическим увеличением значения ключа на 1
name	строка длиной 30
number_plate	строка длиной 6
violation	строка длиной 50
sum_fine	вещественное число, максимальная длина 8, количество знаков после запятой 2
date_violation	дата
date_payment	дата
	CREATE TABLE fine (
		fine_id INT PRIMARY KEY AUTO_INCREMENT,
		name VARCHAR(30),
		number_plate VARCHAR(6),
		violation VARCHAR(50),
		sum_fine DECIMAL(8, 2),
		date_violation DATE,
		date_payment DATE
		);
_______________________________________________
В таблицу fine первые 5 строк уже занесены. Добавить в таблицу записи с ключевыми значениями 6, 7, 8.
6	Баранов П.Е.	Р523ВТ	Превышение скорости
(от 40 до 60)	 	2020-02-14	 
7	Абрамова К.А.	О111АВ	Проезд на
запрещающий сигнал	 	2020-02-23	 
8	Яковлев Г.Р.	Т330ТТ	Проезд на
запрещающий сигнал	 	2020-03-03	 
	INSERT INTO fine (name, number_plate, violation, sum_fine, date_violation, date_payment)
	VALUES ('Баранов П.Е.', 'Р523ВТ', 'Превышение скорости(от 40 до 60)', Null, '2020-02-14', Null),
		('Абрамова К.А.', 'О111АВ', 'Проезд на запрещающий сигнал', Null, '2020-02-23', Null),
		('Яковлев Г.Р.', 'Т330ТТ', 'Проезд на запрещающий сигнал', Null, '2020-03-03', Null);
_______________________________________________	 
Занести в таблицу fine суммы штрафов, которые должен оплатить водитель, в соответствии с данными из таблицы traffic_violation. При этом суммы заносить только в пустые поля столбца  sum_fine.
	UPDATE fine f, traffic_violation tv
	SET f.sum_fine = tv.sum_fine
	WHERE f.violation = tv.violation AND f.sum_fine IS NULL;
_______________________________________________
Вывести фамилию, номер машины и нарушение только для тех водителей, которые на одной машине нарушили одно и то же правило   два и более раз. При этом учитывать все нарушения, независимо от того оплачены они или нет. Информацию отсортировать в алфавитном порядке, сначала по фамилии водителя, потом по номеру машины и, наконец, по нарушению.
	SELECT name, number_plate, violation
	FROM fine
	GROUP BY name, number_plate, violation
	HAVING count(*) >= 2
	ORDER BY name, number_plate, violation
_______________________________________________
В таблице fine увеличить в два раза сумму неоплаченных штрафов для отобранных на предыдущем шаге записей. 
	UPDATE fine, 
		(
		SELECT name, number_plate, violation
		FROM fine
		GROUP BY name, number_plate, violation
		HAVING COUNT(*) >= 2
		) query_in
	SET fine.sum_fine = 2 * fine.sum_fine
	WHERE fine.date_payment IS Null 
		AND fine.name = query_in.name
		AND fine.number_plate = query_in.number_plate
		AND fine.violation = query_in.violation
_______________________________________________
Водители оплачивают свои штрафы. В таблице payment занесены даты их оплаты:

payment_id	name	number_plate	violation	date_violation	date_payment
1	Яковлев Г.Р.	М701АА	Превышение скорости
(от 20 до 40)	2020-01-12	2020-01-22
2	Баранов П.Е.	Р523ВТ	Превышение скорости
(от 40 до 60)	2020-02-14	2020-03-06
3	Яковлев Г.Р.	Т330ТТ	Проезд на
запрещающий сигнал	2020-03-03	2020-03-23
Необходимо:
в таблицу fine занести дату оплаты соответствующего штрафа из таблицы payment; 
уменьшить начисленный штраф в таблице fine в два раза  (только для тех штрафов, информация о которых занесена в таблицу payment) , если оплата произведена не позднее 20 дней со дня нарушения.
	UPDATE fine f, payment p
	SET f.date_payment = p.date_payment,
		f.sum_fine = IF(DATEDIFF(f.date_payment,f.date_violation) <= 20, f.sum_fine / 2, f.sum_fine)
	WHERE f.date_payment IS Null
		AND f.name = p.name
		AND f.number_plate = p.number_plate
		AND f.violation = p.violation;
_______________________________________________	 
Создать новую таблицу back_payment, куда внести информацию о неоплаченных штрафах (Фамилию и инициалы водителя, номер машины, нарушение, сумму штрафа  и  дату нарушения) из таблицы fine.
	CREATE TABLE back_payment AS
	SELECT name, number_plate, violation, sum_fine, date_violation
	FROM fine
	WHERE date_payment IS Null;
_______________________________________________
Удалить из таблицы fine информацию о нарушениях, совершенных раньше 1 февраля 2020 года.
	DELETE FROM fine
	WHERE date_violation < '2020-02-01';
_______________________________________________
Создать таблицу author следующей структуры:

Поле	Тип, описание
author_id	INT PRIMARY KEY AUTO_INCREMENT
name_author	VARCHAR(50)
	CREATE TABLE author (
		author_id INT PRIMARY KEY AUTO_INCREMENT,
		name_author VARCHAR(50)
	);
_______________________________________________
Заполнить таблицу author. В нее включить следующих авторов:

Булгаков М.А.
Достоевский Ф.М.
Есенин С.А.
Пастернак Б.Л.
	INSERT INTO author (name_author)
	VALUES ('Булгаков М.А.'), 
		('Достоевский Ф.М.'), 
		('Есенин С.А.'), 
		('Пастернак Б.Л.');
_______________________________________________	 
Перепишите запрос на создание таблицы book , чтобы ее структура соответствовала структуре, показанной на логической схеме (таблица genre уже создана, порядок следования столбцов - как на логической схеме в таблице book, genre_id  - внешний ключ) . Для genre_id ограничение о недопустимости пустых значений не задавать. В качестве главной таблицы для описания поля  genre_idиспользовать таблицу genre следующей структуры:

Поле	Тип, описание
genre_id	INT PRIMARY KEY AUTO_INCREMENT
name_genre	VARCHAR(30)
	CREATE TABLE book (
	   book_id INT PRIMARY KEY AUTO_INCREMENT,
	   title VARCHAR(50),
	   author_id INT NOT NULL,
	   genre_id INT,
	   price DECIMAL(8,2),
	   amount INT,
	   FOREIGN KEY (author_id)  REFERENCES author (author_id) ,
	   FOREIGN KEY (genre_id) REFERENCES genre (genre_id)
	);
_______________________________________________
Создать таблицу book той же структуры, что и на предыдущем шаге. Будем считать, что при удалении автора из таблицы author, должны удаляться все записи о книгах из таблицы book, написанные этим автором. А при удалении жанра из таблицы genre для соответствующей записи book установить значение Null в столбце genre_id. 
	CREATE TABLE book (
	   book_id INT PRIMARY KEY AUTO_INCREMENT,
	   title VARCHAR(50),
	   author_id INT NOT NULL,
	   genre_id INT,
	   price DECIMAL(8,2),
	   amount INT,
	   FOREIGN KEY (author_id)  REFERENCES author (author_id) ON DELETE CASCADE,
	   FOREIGN KEY (genre_id) REFERENCES genre (genre_id) ON DELETE SET NULL
	);

_______________________________________________
Добавьте три последние записи (с ключевыми значениями 6, 7, 8) в таблицу book, первые 5 записей уже добавлены:

book_id	title	author_id	genre_id	price	amount
6	Стихотворения и поэмы	3	2	650.00	15
7	Черный человек	3	2	570.20	6
8	Лирика	4	2	518.99	2
	INSERT INTO book (title, author_id, genre_id, price, amount)
	VALUES ('Стихотворения и поэмы', 3, 2, 650.00, 15),
		('Черный человек', 3, 2, 570.20, 6),
		('Лирика', 4, 2, 518.99, 2);
_______________________________________________

_______________________________________________	 

_______________________________________________

_______________________________________________

_______________________________________________

_______________________________________________	 